{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/button-toggle.js"],"names":["MatButtonToggleDefaultOptions","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","decorators","type","args","selector","providers","host","exportAs","ctorParameters","propDecorators","MatButtonToggle","descendants","vertical","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_type","_isPrechecked","monitor","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","template","encapsulation","None","changeDetection","OnPush","inputs","styles","String","ariaLabel","MatButtonToggleModule","imports","exports","declarations"],"mappings":"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","file":"default~about-about-module-ngfactory~comparar-comparar-module-ngfactory~home-evamed-home-evamed-modu~309a67d0-es5.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/button-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n * @record\n */\nfunction MatButtonToggleDefaultOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    MatButtonToggleDefaultOptions.prototype.appearance;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatButtonToggleGroup)),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * The MatButtonToggle that emits the event.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.source;\n    /**\n     * The value assigned to the MatButtonToggle.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.value;\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle.value));\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle._markForCheck()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked)));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => this._updateModelValue(isUserInput)));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => toggle.value != null && value === toggle.value));\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked = false));\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                },\n                exportAs: 'matButtonToggleGroup',\n            },] }\n];\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatButtonToggle)), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatButtonToggleGroup.ngAcceptInputType_vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._selectionModel;\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._rawValue;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._onTouched;\n    /**\n     * Child button toggle buttons.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._buttonToggles;\n    /**\n     * The appearance for all the buttons in the group.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._name;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.valueChange;\n    /**\n     * Event emitted when the group's value changes.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.change;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggleGroup.prototype._changeDetector;\n}\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatButtonToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._isSingleSelector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._checked;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabel;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabelledby;\n    /**\n     * Type of the button toggle. Either 'radio' or 'checkbox'.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._type;\n    /** @type {?} */\n    MatButtonToggle.prototype._buttonElement;\n    /**\n     * The parent button toggle group (exclusive selection). Optional.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.buttonToggleGroup;\n    /**\n     * The unique ID for this button toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.id;\n    /**\n     * HTML's 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.name;\n    /**\n     * MatButtonToggleGroup reads this to assign its own value.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.value;\n    /**\n     * Tabindex for the toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.tabIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._disabled;\n    /**\n     * Event emitted when the group value changes.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.change;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatButtonToggle.prototype._focusMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/button-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/button-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggleModule };\n//# sourceMappingURL=button-toggle.js.map\n"]}